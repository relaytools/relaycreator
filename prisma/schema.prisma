// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String      @id @default(cuid())
  pubkey    String      @unique
  name      String?
  orders    Order[]
  // these are relay the user owns vs. is a moderator for
  relays    Relay[]
  moderator Moderator[]
  admin     Boolean @default(false)
  nip05Orders Nip05Order[]

  @@index([id])
}

model Order {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  relay        Relay     @relation(fields: [relayId], references: [id])
  relayId      String
  status       String    @db.VarChar(255)
  paid         Boolean   @default(false)
  payment_hash String    @db.VarChar(64)
  lnurl        String    @db.VarChar(1024)
  expires_at   DateTime?
  paid_at      DateTime?
  amount       Int       @default(21000)

  @@index([userId])
}

model ClientOrder {
  id           String    @id @default(cuid())
  relay        Relay     @relation(fields: [relayId], references: [id])
  relayId      String
  pubkey       String    @db.VarChar(255)
  paid         Boolean   @default(false)
  payment_hash String    @db.VarChar(64)
  lnurl        String    @db.VarChar(1024)
  expires_at   DateTime?
  paid_at      DateTime?
  amount       Int       @default(21)

  @@index([relayId])
}

model Nip05 {
    id  String  @id @default(cuid())
    pubkey String
    name String
    domain String
    relayUrls RelayUrl[]
    nip05Orders Nip05Order[]
}

// used by nip05
model RelayUrl {
    id  String  @id @default(cuid())
    nip05   Nip05  @relation(fields: nip05Id, references: [id], onDelete: Cascade)
    nip05Id String
    url String

    @@index([nip05Id])
}

model Nip05Order {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  status       String    @db.VarChar(255)
  paid         Boolean   @default(false)
  payment_hash String    @db.VarChar(64)
  lnurl        String    @db.VarChar(1024)
  expires_at   DateTime?
  paid_at      DateTime?
  amount       Int       @default(21000)
  nip05        Nip05  @relation(fields: [nip05Id], references: [id], onDelete: Cascade)
  nip05Id      String
}

model Relay {
  id                     String        @id @default(cuid())
  name                   String        @db.VarChar(255)
  ownerId                String
  status                 String?       @db.VarChar(255)
  owner                  User          @relation(fields: [ownerId], references: [id])
  moderators             Moderator[]
  Order                  Order[]
  ClientOrder            ClientOrder[]
  streams                Stream[]
  allow_list             AllowList?
  block_list             BlockList?
  details                String?       @db.Text
  domain                 String?       @db.VarChar(255)
  default_message_policy Boolean       @default(true)
  listed_in_directory    Boolean       @default(false)
  payment_required       Boolean       @default(false)
  payment_amount         Int           @default(21)
  ip                     String?       @db.VarChar(255)
  capacity               Int?
  port                   Int?
  created_at             DateTime?
  profile_image          String?       @db.VarChar(2048)
  banner_image           String?       @db.VarChar(2048)
  is_external            Boolean       @default(false)
  is_proxied            Boolean       @default(false)
  allow_giftwrap             Boolean       @default(true)
  allow_tagged          Boolean       @default(false)
  auth_required          Boolean       @default(false)
  // false is keyword -or- pubkey, true is keyword -and- pubkey. default to false.
  allow_keyword_pubkey   Boolean       @default(false)
  relay_kind_description String       @db.VarChar(255) @default("")
  referrer               String?       @db.VarChar(255) @default("")

  @@index([ownerId])
}

model Server {
    id           String    @id @default(cuid())
    ip           String    @db.VarChar(255)
    available    Boolean   @default(true)
}

model Stream {
    id           String    @id @default(cuid())
    relayId      String
    relay        Relay     @relation(fields: [relayId], references: [id])
    url          String    @db.VarChar(1024)
    direction    String    @db.VarChar(255)
    internal     Boolean   @default(false)
    sync       Boolean   @default(false)
    status       String    @db.VarChar(1024)
}

model Moderator {
  id      String @id @default(cuid())
  relay   Relay  @relation(fields: relayId, references: [id])
  relayId String
  user    User   @relation(fields: userId, references: [id])
  userId  String
}

model AllowList {
  id            String             @id @default(cuid())
  relay         Relay              @relation(fields: [relayId], references: [id])
  relayId       String             @unique
  list_keywords ListEntryKeyword[]
  list_pubkeys  ListEntryPubkey[]
  list_kinds    ListEntryKind[]
}

model BlockList {
  id            String             @id @default(cuid())
  relay         Relay              @relation(fields: [relayId], references: [id])
  relayId       String             @unique
  list_keywords ListEntryKeyword[]
  list_pubkeys  ListEntryPubkey[]
  list_kinds    ListEntryKind[]
}

model ListEntryPubkey {
  id          String     @id @default(cuid())
  AllowList   AllowList? @relation(fields: [AllowListId], references: [id])
  AllowListId String?
  BlockList   BlockList? @relation(fields: [BlockListId], references: [id])
  BlockListId String?
  pubkey      String     @db.VarChar(255)
  reason      String?    @db.VarChar(255)
  expires_at  DateTime?
}

model ListEntryKeyword {
  id          String     @id @default(cuid())
  AllowList   AllowList? @relation(fields: [AllowListId], references: [id])
  AllowListId String?
  BlockList   BlockList? @relation(fields: [BlockListId], references: [id])
  BlockListId String?
  keyword     String     @db.VarChar(255)
  reason      String?    @db.VarChar(255)
  expires_at  DateTime?
}

model ListEntryKind {
    id          String     @id @default(cuid())
    AllowList   AllowList? @relation(fields: [AllowListId], references: [id])
    AllowListId String?
    BlockList   BlockList? @relation(fields: [BlockListId], references: [id])
    BlockListId String?
    kind        Int        @db.Int
    reason      String?    @db.VarChar(255)
}

model LoginToken {
  id         String   @id @default(cuid())
  token      String   @unique
  created_at DateTime
}